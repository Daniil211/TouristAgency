@using System.Text.RegularExpressions

<div class="col-sm-12 col-md-4 p-3 text-center">
    <div class="tour-name">
        <a href="@url">@Tour.TourName</a>
    </div>

    <hr class="hrfix" />

    <div class="card-image">
        <a href="@url">
            @if (IsBase64(Tour.Image))
            {
                <img src="data:image/jpeg;base64,@Tour.Image" class="tour-image" />
            }
            else
            {
                <img src="@Tour.Image" alt="@Tour.TourName" class="tour-image" />
            }
        </a>
    </div>
    <hr class="hrfix" />
    <AuthorizeView Roles="Admin">
        <NotAuthorized>

        </NotAuthorized>
        <Authorized>
            <div class="tour-card-footer">
                <div class="btn-group my-3 text-center" role="group">
                    <button type="button" class="btn btn-outline-info" @onclick="(() => OnEditTour.InvokeAsync(Tour))">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button type="button" class="btn btn-outline-danger" @onclick="(() => OnDeleteTour.InvokeAsync(Tour))">
                        <i class="fas fa-trash-alt"></i>
                    </button>
                </div>
            </div>
        </Authorized>
    </AuthorizeView>
</div>

@code {

    [Parameter]
    public Tour Tour { get; set; }
    [Parameter]
    public EventCallback<Tour> OnDeleteTour { get; set; }
    [Parameter]
    public EventCallback<Tour> OnEditTour { get; set; }

    string url = string.Empty;

    protected override void OnInitialized()
    {
        url = $"tours/{Tour.TourId}/{Uri.EscapeDataString(Tour.TourName)}";
    }

    bool IsBase64(string value)
    {
        if(value == null || value.Length == 0)
            return false;
        value = value.Trim();
        return ((value.Length % 4 == 0) && Regex.IsMatch(value, @"^[a-zA-Z0-9\+/]*={0,3}$", RegexOptions.None));
    }
}
