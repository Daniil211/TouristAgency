@inject IRepository _db
@using Application.Web.Client.Data.Repository;
@using Application.Web.Client.Helpers
<EditForm Model="Game" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Tour Name:</label>
        <div>
            <InputText class="form-control" @bind-Value="Game.TourName" />
            <ValidationMessage For="@(() => Game.TourName)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label>Duration:</label>
        <div>
            <InputText class="form-control" @bind-Value="Game.Duration" />
            <ValidationMessage For="@(() => Game.Duration)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label>Price:</label>
        <div>
            <Input class="form-control" @bind-Value="Game.Price" />
            <ValidationMessage For="@(() => Game.Price)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label>Video presentation of the tour:</label>
        <div>
            <InputText class="form-control" @bind-Value="Game.VideoTour" />
            <ValidationMessage For="@(() => Game.VideoTour)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label>Sales start date:</label>
        <div>
            <InputDate class="form-control" @bind-Value="Game.Time" />
            <ValidationMessage For="@(() => Game.Time)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <InputImage Label="Image" OnImageFileSelected="ImageFileSelectedHandler" ImageUrl="@imageUrl" />
    </div>
    <div class="form-check">
        <InputCheckbox @bind-Value="Game.InSale" class="form-check-input" id="gridCheck1" />
        <label class="form-check-label" for="gridCheck1">In Sale?:</label>
    </div>
    <div class="form-group form-markdown">
        <MarkdownInput @bind-Value="Game.Description"
                       Label="Description"
                       OnFor="(() => Game.Description)" />
    </div>

    <button class="btn btn-primary" type="submit">Save Changes</button>
</EditForm>

@code {
    [Parameter]
    public Tour Game { get; set; }
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public List<TourOperator> SelectedDevelopers { get; set; } = new();

    [Parameter]
    public List<Transport> SelectedGenres { get; set; } = new();
    [Parameter]
    public List<Transport> NotSelectedGenres { get; set; } = new();

    [Parameter]
    public List<MultipleSelectorHelperModel> Selected { get; set; } = new();
    [Parameter]
    public List<MultipleSelectorHelperModel> NotSelected { get; set; } = new();

    string imageUrl;

    protected override void OnInitialized()
    {
        Selected = SelectedGenres.Select(x => new MultipleSelectorHelperModel(x.TransportId.ToString(), x.TypeOfTransport)).ToList();
        NotSelected = NotSelectedGenres.Select(x => new MultipleSelectorHelperModel(x.TransportId.ToString(), x.TypeOfTransport)).ToList();


        if (Game.Time is null)
            Game.Time = DateTime.Now;

        if (!string.IsNullOrWhiteSpace(Game.Image))
        {
            imageUrl = Game.Image;
            Game.Image = null;
        }
    }

    void ImageFileSelectedHandler(string imageBase64)
    {
        Game.Image = imageBase64;
        imageUrl = null;
    }

    async Task<IEnumerable<TourOperator>> SearchHandler(string searchText)
    {
        return _db.GetAllTourOperators();
    }
}
