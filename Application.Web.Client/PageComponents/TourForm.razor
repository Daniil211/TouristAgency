@inject IRepository _db
@using Application.Web.Client.Data.Repository;
@using Application.Web.Client.Helpers
<Modal Title="@title"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
    <p>@errordescription</p>
</Modal>
<EditForm Model="Tour" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Tour Name:</label>
        <div>
            <InputText class="form-control" maxlength="16" @bind-Value="Tour.TourName" />
            <ValidationMessage For="@(() => Tour.TourName)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label>Duration:</label>
        <div>
            <InputText class="form-control" maxlength="16" @bind-Value="Tour.Duration" />
            <ValidationMessage For="@(() => Tour.Duration)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label>Price:</label>
        <div>
            <Input class="form-control" @bind-Value="Tour.Price" OnInput="OnPriceInput" Min="0" />
            <ValidationMessage For="@(() => Tour.Price)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label>Video presentation of the tour:</label>
        <div>
            <InputText class="form-control" maxlength="16" @bind-Value="Tour.VideoTour" />
            <ValidationMessage For="@(() => Tour.VideoTour)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <label>Sales start date:</label>
        <div>
            <InputDate class="form-control" @bind-Value="Tour.Time" min="1990-01-01" />
            <ValidationMessage For="@(() => Tour.Time)"></ValidationMessage>
        </div>
    </div>
    <div class="form-group">
        <InputImage Label="Image" OnImageFileSelected="ImageFileSelectedHandler" ImageUrl="@imageUrl" />
    </div>
    <div class="form-check">
        <InputCheckbox @bind-Value="Tour.InSale" class="form-check-input" id="gridCheck1" />
        <label class="form-check-label" for="gridCheck1">In Sale?:</label>
    </div>
    <div class="form-group form-markdown">
        <MarkdownInput @bind-Value="Tour.Description"
                       Label="Description"
                       OnFor="(() => Tour.Description)" />
    </div>

    <button class="btn btn-primary" type="submit">Save Changes</button>
</EditForm>

@code {
    [Parameter]
    public Tour Tour { get; set; }
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public List<TourOperator> SelectedDevelopers { get; set; } = new();

    [Parameter]
    public List<Transport> SelectedGenres { get; set; } = new();
    [Parameter]
    public List<Transport> NotSelectedGenres { get; set; } = new();

    [Parameter]
    public List<MultipleSelectorHelperModel> Selected { get; set; } = new();
    [Parameter]
    public List<MultipleSelectorHelperModel> NotSelected { get; set; } = new();
    string title = "Error notification";
    string errordescription = string.Empty;
    bool _visible = false;
    string imageUrl;
    private void HandleOk(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _visible = false;
    }
    protected override void OnInitialized()
    {
        try
        {
            Selected = SelectedGenres.Select(x => new MultipleSelectorHelperModel(x.TransportId.ToString(), x.TypeOfTransport)).ToList();
            NotSelected = NotSelectedGenres.Select(x => new MultipleSelectorHelperModel(x.TransportId.ToString(), x.TypeOfTransport)).ToList();


            if (Tour.Time is null)
                Tour.Time = DateTime.Now;

            if (!string.IsNullOrWhiteSpace(Tour.Image))
            {
                imageUrl = Tour.Image;
                Tour.Image = null;
            }
        }
        catch (Exception ex)
        {
            _visible = true;
            errordescription = ex.ToString();
        }
    }
    void OnPriceInput(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int value))
        {
            if (value < 0)
            {
                value = 0;
            }
            Tour.Price = value;
        }
    }
    void ImageFileSelectedHandler(string imageBase64)
    {
        try
        {
            Tour.Image = imageBase64;
            imageUrl = null;
        }
        catch (Exception ex)
        {
            _visible = true;
            errordescription = ex.ToString();
        }
    }

    //async Task<IEnumerable<TourOperator>> SearchHandler(string searchText)
    //{
    //    return _db.GetAllTourOperators();
    //}
}
